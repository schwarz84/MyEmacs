* Seteo de configuracion
  #+BEGIN_SRC emacs-lisp
    ;;; ui_theme.el --- Archivo de configuración de tema e interfaz de Emacs -*- lexical-binding: t -*-

    ;; Autor: Carlos Schwarz
    ;; Mantenimiento: Carlos Schwarz
    ;; Versión: 1.0
    
    ;; Este archivo no forma parte del proyecto Emacs
    
    ;; Este archivo es software libre; puedes redistribuirlo y/o modificarlo
    ;; bajo los términos de la GNU General Public License como está publicado en
    ;; la Free Software Foundation
    
    ;; Este programa se distribuye con la esperanza de que sea de utilidad,
    ;; pero SIN NINGUNA GARANTÍA; sin siquiera la garantía implícita de
    ;; COMERCIABILIDAD o APTITUD PARA UN PROPÓSITO EN PARTICULAR. Ver la
    ;; GNU General Public License para más detalles.
    
    ;; Para una copia completa de la GNU General Public License
    ;; ve a <http://www.gnu.org/licenses/>.
    
    ;;; Commentary:
    
    ;; Este archivo contiene mis configuraciones personales para la vista y tema del programa.
    
    ;;; Code:
    
    ;; Instalar all-the-icons
    (use-package all-the-icons
      :if (display-graphic-p))
    
    ;; No mostrar el mensaje de bienvenida
    (setq inhibit-startup-message t)
    
    (scroll-bar-mode -1)  ; Quitar la barra de desplazamiento
    (tool-bar-mode -1)    ; Quitar la barra de herramientas rápidas
    (tooltip-mode -1)     ; Quitar las pistas de herramientas
    (set-fringe-mode 10)  ; Añadir un poco más de espacio en el marco
    (menu-bar-mode -1)    ; Quitar la barra de menú
    
    ;; Mejorar el uso del mouse
    (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))  ;; El scroll se mueve una línea a la vez
    (setq mouse-wheel-progressive-speed nil)             ;; El scroll no acelera
    (setq mouse-wheel-follow-mouse 't)                   ;; El scroll sigue el marco bajo el mouse
    (setq scroll-step 1)                                 ;; El scroll del teclado mueve una línea por vez
    (setq use-dialog-box nil)                            ;; Deshabilitar los cuadros de diálogo si no estamos en Mac
    
    ;; Poner la pantalla completa
    (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
    (add-to-list 'default-frame-alist '(fullscreen . maximized))
    
    ;; Mostrar el número de columna
    (column-number-mode)
    
    ;; Resaltar la línea en la que se está trabajando
    (global-hl-line-mode 1)
    
    ;; Configuración de tabulaciones
    (setq-default tab-width 4)
    (setq-default evil-shift-width tab-width)
    (setq-default indent-tabs-mode nil)  ;; Usar espacios en vez de tabulaciones para indentar
    
    ;; Permitir responder a preguntas críticas con 'y' o 'n'
    (fset 'yes-or-no-p 'y-or-n-p)
    
    ;; Configuración UTF-8
    (set-default-coding-systems 'utf-8)
    (set-language-environment "UTF-8")
    
    ;; Listar ibuffer por defecto
    (defalias 'list-buffers 'ibuffer)
    (defalias 'list-buffers 'ibuffer-other-window)
    
    ;; Agregar los números solo en el texto
    (dolist (mode '(text-mode-hook
                    prog-mode-hook
                    conf-mode-hook))
      (add-hook mode (lambda () (display-line-numbers-mode 1))))
    
    ;; Guardar en el kill ring cosas de otros programas sin reemplazar lo de Emacs
    (setq save-interprogram-paste-before-kill t)
    
    ;; Configuración que auto-carga un archivo modificado fuera de Emacs
    (global-auto-revert-mode 1)
    (setq auto-revert-verbose nil)
    (global-set-key (kbd "<f5>") 'revert-mode)
    
    ;; Configuración de ligatures
    (use-package ligature
      :load-path "~/.emacs.d/config/ligature.el"
      :config
      (ligature-set-ligatures 't '("www"))
      (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
      (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                                           ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                                           "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                                           "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                                           "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                                           "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                                           "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                                           "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                                           ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                                           "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                                           "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                                           "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
                                           "\\\\" "://"))
      (global-ligature-mode t))
    
    (set-frame-font "CaskaydiaCove Nerd Font" t)

    ;; Instalar y cargar el tema Jazz
    (use-package jazz-theme
      :ensure t
      :config
      (load-theme 'jazz t))
    
    (whitespace-mode t)
    (global-whitespace-newline-mode t)
    
    (setq whitespace-display-mappings '((space-mark 32 [183] [46])
                                        (space-mark 160 [164] [95])
                                        (tab-mark 9 [187 9] [92 9])))
    
    (setq whitespace-style '(face trailing tabs spaces newline missing-newline-at-eof empty indentation space-after-tab space-before-tab space-mark tab-mark newline-mark))
    
    ;; Configurar las caras de whitespace para que siempre se vean blancos
    (custom-set-faces
     '(whitespace-space ((t (:background nil :foreground "white"))))
     '(whitespace-hspace ((t (:background nil :foreground "white"))))
     '(whitespace-tab ((t (:background nil :foreground "white"))))
     '(whitespace-newline ((t (:background nil :foreground "white"))))
     '(whitespace-trailing ((t (:background nil :foreground "white"))))
     '(whitespace-line ((t (:background nil :foreground "white"))))
     '(whitespace-space-before-tab ((t (:background nil :foreground "white"))))
     '(whitespace-indentation ((t (:background nil :foreground "white"))))
     '(whitespace-empty ((t (:background nil :foreground "white"))))
     '(whitespace-space-after-tab ((t (:background nil :foreground "white")))))
    


    (defun my-compilation-mode-hook ()
      (setq truncate-lines nil) ;; becomes buffer local
      (set (make-local-variable 'truncate-partial-width-windows) nil))
    (add-hook 'compilation-mode-hook 'my-compilation-mode-hook)
       
    ;; Modeline de Doom
    (use-package doom-modeline
      :ensure t
      :init (doom-modeline-mode 1)
      :custom ((doom-modeline-height 13)))
    
    ;; Para poder personalizar el modeline
    (use-package minions
      :hook (doom-modeline-mode . minions-mode))
    
    (setq visible-bell nil
          ring-bell-function 'double-flash-mode-line)
    
    (defun double-flash-mode-line ()
      (let ((flash-sec (/ 1.0 20)))
        (invert-face 'mode-line)
        (run-with-timer flash-sec nil #'invert-face 'mode-line)
        (run-with-timer (* 2 flash-sec) nil #'invert-face 'mode-line)
        (run-with-timer (* 3 flash-sec) nil #'invert-face 'mode-line)))
    
    ;; Cerrar los buffers no deseados en el inicio
    (defun close-unwanted-buffers ()
      "Cerrar los buffers no deseados al iniciar Emacs."
      (when (get-buffer "*Messages*")
        (kill-buffer "*Messages*"))
      (when (get-buffer "*straight-process*")
        (kill-buffer "*straight-process*")))
    
    ;; Agregar el hook para cerrar los buffers después de la inicialización
    (add-hook 'emacs-startup-hook 'close-unwanted-buffers)
    
    ;; Iniciar Emacs solo con el buffer *scratch*
    (setq initial-buffer-choice t)
    (setq inhibit-startup-screen t)
    (setq inhibit-startup-echo-area-message t)
    (setq initial-major-mode 'lisp-interaction-mode)
    (setq initial-scratch-message nil)

    (delete-selection-mode 1)
        
    (provide 'ui_theme)
    ;;; ui_theme.el ends here
  
  #+END_SRC
